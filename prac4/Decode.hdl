// File name: Decode.hdl

/**
 * The instruction decoder determines the type of instruction (a or c)
 * and decodes those instructions.
 * The input in[16] is the instruction to be decoded.
 * The outputs are used as follows:
 *   type:      0 if a-instruction, 1 if c-instruction. 
 *   a:         Determines whether the ALU input uses A (0) or Memory[A] (1)
 *   c1 .. c6:  Op-code wires to ALU
 *   d1 d2 d3:  Destination wires to the load pins of A,D registers and Memory
 *   j1 j2 j3:  Jump wires to Jump Unit
 * For a-instructions, d1 should be 1, all other outputs should be 0
 * For c-instructions, outputs should correspond to their bits in the c-instruction
 */

CHIP Decode {

    IN  in[16];             // instruction to decode

    OUT type,               // Instruction type
        a,                  // ALU A/M
        c1,c2,c3,c4,c5,c6,  // Op-code wires to ALU
        d1,d2,d3,           // Destination wires
        j1,j2,j3;           // Jump wires

PARTS:
    Mux16(a=0, b=in, sel=in[15..15], out=type);  // Extract the most significant bit as the instruction type

    // Determine whether the instruction is an A-instruction (type=0) or C-instruction (type=1)
    Mux16(a=0, b=in, sel=type, out=ainstruction);
    Mux16(a=0, b=ainstruction, sel[0..0], out=a);

    // Extract control signals for C-instructions
    // Op-code wires to ALU
    Mux16(a=0, b=in, sel=type, out=cinstruction);
    And16(a=cinstruction, b[15..15]=0, out=opcode_bits);  // Extract bits c1..c6
    DMux4Way(in=opcode_bits, sel=cinstruction[3..1], a=c1, b=c2, c=c3, d=c4);
    And16(a=opcode_bits, b=Not16(And(a=cinstruction[3..3], b=cinstruction[0..0])), out=c5);
    And16(a=opcode_bits, b=cinstruction[3..3], out=c6);

    // Destination wires
    And16(a=cinstruction, b[15..14]=0, out=dest_bits);  // Extract bits d1..d3
    And(a=dest_bits[0..0], b=Not16(type), out=d1);
    And(a=dest_bits[1..1], b=Not16(type), out=d2);
    And(a=dest_bits[2..2], b=Not16(type), out=d3);

    // Jump wires
    And16(a=cinstruction, b[15..13]=0, out=jump_bits);  // Extract bits j1..j3
    And(a=jump_bits[0..0], b=type, out=j1);
    And(a=jump_bits[1..1], b=type, out=j2);
    And(a=jump_bits[2..2], b=type, out=j3);
}
