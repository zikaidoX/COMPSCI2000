// File name: Jump.hdl

/**
 * The jump unit determines whether the Program Counter should jump.
 * A jump is performed if any of the j1 j2 j3 bits of the c-instruction 
 * are true, AND the matching condition is met:
 *   j1: jump if ALU output is < 0
 *   j2: jump if ALU output   == 0
 *   j3: jump if ALU output is > 0
 * If multiple of these bits are set true, then jump if any of 
 * those conditions are met,
 * e.g. if j1 and j2 are both set true, jump if < 0 or == 0 
 * The ALU output is determined through the zr and ng wires:
 *   zr: is true when the ALU's output   == 0, false otherwise
 *   ng: is true when the ALU's output is < 0, false otherwise
 * If both zr and ng are false, then the ALU's output is > 0
 */

CHIP Jump {

    IN  j1,             // c-instruction j1
        j2,             // c-instruction j2
        j3,             // c-instruction j3
        zr,             // zr pin from ALU
        ng;             // ng pin from ALU

    OUT jump;           // true if a jump should be performed, false otherwise 

    PARTS:

    // Logic to determine whether a jump should occur
    OR(a=j1, b=j2, out=jump_j1_or_j2);     // (j1 || j2)
    OR(a=jump_j1_or_j2, b=j3, out=jump_condition); // (j1 || j2) || j3

    // Logic to determine if the ALU output is < 0
    NOT(in=ng, out=not_ng);
    AND(a=not_ng, b=j1, out=jump_if_ng_and_j1); // !ng && j1

    // Logic to determine if the ALU output is == 0
    NOT(in=zr, out=not_zr);
    AND(a=zr, b=j2, out=jump_if_zr_and_j2); // zr && j2

    // Logic to determine if the ALU output is > 0
    NOT(in=ng, out=not_ng_for_pos);
    AND(a=not_ng_for_pos, b=not_zr, out=jump_if_pos); // !ng && !zr

    // Combining the conditions to decide whether to jump
    OR(a=jump_if_ng_and_j1, b=jump_if_zr_and_j2, out=jump_if_ng_or_zr); // (ng && j1) || (zr && j2)
    OR(a=jump_if_ng_or_zr, b=jump_if_pos, out=jump_if_any_condition);    // (ng && j1) || (zr && j2) || (!ng && !zr)

    AND(a=jump_condition, b=jump_if_any_condition, out=jump); // (j1 || j2 || j3) && ((ng && j1) || (zr && j2) || (!ng && !zr))
}
