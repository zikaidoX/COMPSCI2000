// File name: Jump.hdl

/**
 * The jump unit determines whether the Program Counter should jump.
 * A jump is performed if any of the j1 j2 j3 bits of the c-instruction 
 * are true, AND the matching condition is met:
 *   j1: jump if ALU output is < 0
 *   j2: jump if ALU output   == 0
 *   j3: jump if ALU output is > 0
 * If multiple of these bits are set true, then jump if any of 
 * those conditions are met,
 * e.g. if j1 and j2 are both set true, jump if < 0 or == 0 
 * The ALU output is determined through the zr and ng wires:
 *   zr: is true when the ALU's output   == 0, false otherwise
 *   ng: is true when the ALU's output is < 0, false otherwise
 * If both zr and ng are false, then the ALU's output is > 0
 */

CHIP Jump {

    IN  j1,             // c-instruction j1
        j2,             // c-instruction j2
        j3,             // c-instruction j3
        zr,             // zr pin from ALU
        ng;             // ng pin from ALU

    OUT jump;           // true if a jump should be performed, false otherwise 

    PARTS:
    // Implement the logic for the jump conditions
    // If any of j1, j2, or j3 is true AND the corresponding ALU condition is met,
    // then set the jump output to true.

    // Combine conditions for jumps
    AND(a = j1, b = ng, out = j1_ng);
    AND(a = j2, b = zr, out = j2_zr);
    AND(a = j3, b = Not(zr), out = j3_not_zr);

    // Combine j1, j2, and j3 conditions
    OR(a = j1_ng, b = j2_zr, out = j1_ng_or_j2_zr);
    OR(a = j1_ng_or_j2_zr, b = j3_not_zr, out = jump);
}
