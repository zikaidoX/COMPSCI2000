function ArrMax.arrMax 0

  // Initialize variables

  push constant 0  // Max value

  push local 0     // Load the base address of the array (m) into the pointer

  push constant 0  // Initialize the index variable i

  // Start loop to find the maximum value

  label LOOP_START

    // Load the current value at the array[m+i] into the D register

    // Note: Using pointer arithmetic to access the array element

    push that 0

    // Compare the current value with the max value

    lt

    // If the current value is less than the max value, skip the next instructions

    if-goto SKIP_UPDATE

      // Update the max value with the current value

      pop temp 0   // Store the current value in temp

      pop local 1  // Update max value with temp

      push temp 0  // Restore the current value on the stack

    label SKIP_UPDATE

    // Increment the index variable i

    push constant 1

    add

    pop local 0   // Update the index variable i

    // Check if we have reached the end of the array

    push local 0

    push argument 1  // Load the number of elements (n)

    eq

    // If i == n, exit the loop

    if-goto LOOP_END

    // Otherwise, continue the loop

    goto LOOP_START

  label LOOP_END

  // Return the max value

  push local 1

  return